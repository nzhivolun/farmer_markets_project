# utils.py
# ===========================================================
# Этот модуль содержит вспомогательные функции:
# - Проверка корректности ID
# - Проверка координат (широта и долгота)
# - Пагинация (переход между страницами в списке)
# ===========================================================

import math  # модуль нужен для округления вверх и тригонометрии

def validate_id(input_value):
    """
    isdigit() проверяет, что строка состоит только из цифр.Возвращаем int для использования в SQL.
    Проверяет, что введённое значение — это положительное целое число.
    Если всё хорошо — возвращает int.
    Если ошибка — выводит сообщение и возвращает None.
    """
    if input_value.isdigit():
        return int(input_value) # например: "123" - 123
    else:
        print("Ошибка: ID должно быть числом.")
        return None


def validate_coordinates(lat, lon):
    """
    Проверяет, что широта и долгота — это корректные числа.
    Диапазон:
    - Широта (latitude): от -90 до 90
    - Долгота (longitude): от -180 до 180
    Возвращает (lat, lon) как float, либо None в случае ошибки.
    """
    try:
        # Преобразуем строки в числа с плавающей точкой
        lat = float(lat) # Преобразуем широту в число (например, "59.93" → 59.93 - Санкт-Петербург)
        lon = float(lon) # Преобразуем долготу в число (например, "30.31" → 30.31 - Санкт-Петербург)
    except ValueError:
        # Если ошибка при преобразовании — выводим сообщение
        print("Ошибка: координаты должны быть числами.")
        return None

    # Проверка, что координаты находятся в допустимом диапазоне
    if not (-90 <= lat <= 90 and -180 <= lon <= 180): #  (lat) — это как "верх/низ" на глобусе,  (lon) — это как "лево/право" на глобусе:
        print("Ошибка: широта [-90,90], долгота [-180,180].")
        return None

    return lat, lon  # возвращаем кортеж из двух чисел


def paginate(offset, per_page, total=None):
    """
    Организует навигацию между страницами при просмотре длинных списков.
    
    Аргументы:
    - offset: текущая позиция (например, 0 — это первая страница)
    - per_page: сколько элементов на одной странице
    - total: общее количество элементов (нужно для расчёта всех страниц)

    Управление:
    - [+] следующая страница
    - [-] предыдущая
    - [<<] первая
    - [>>] последняя
    - [число] перейти на определённую страницу
    - [0] вернуться в меню
    """
    # === Показываем текущую страницу / общее количество страниц (если знаем total)
    if total is not None:
        total_pages = math.ceil(total / per_page)  # округляем вверх (например, 52 / 20 = 3 страницы)
        current_page = offset // per_page + 1       # вычисляем текущую страницу (начинается с 1)
        print(f"\nСтраница {current_page} из {total_pages}")
    else:
        print("\nПереход между страницами:")
        
    # === Подсказка пользователю, какие есть команды
    print("[<<] Первая | [+] Следующая | [-] Предыдущая | [>>] Последняя | [число] Перейти | [0] Меню")

    # Читаем команду от пользователя
    command = input("Ваш выбор: ").strip().lower()

    # Следующая страница
    if command == "+":
        return offset + per_page
    
    # Предыдущая страница (не меньше 0)
    elif command == "-":
        return max(0, offset - per_page)
    
    # Первая страница
    elif command == "<<":
        return 0
    
    # Последняя страница (если знаем total)
    elif command == ">>" and total is not None:
        return (total_pages - 1) * per_page
    
    # Выход в меню
    elif command == "0":
        return None
    
    # Если введено число — это переход на указанную страницу
    elif command.isdigit():
        page = int(command)
        if total is not None and 1 <= page <= total_pages:
            return (page - 1) * per_page
        else:
            print("Ошибка: номер страницы вне допустимого диапазона.")
            return offset # возвращаемся на текущую страницу
    else:
        # Если команда непонятна
        print("Неверная команда.")
        return offset
