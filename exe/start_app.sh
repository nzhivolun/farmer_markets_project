#!/bin/bash
# ===========================================================
# start_app.sh
#
# Этот скрипт нужен для удобного запуска всего проекта с Docker.
# Он выполняется на хосте (вашем компьютере), а не внутри контейнера.
#
# Основные задачи:
# 1. Проверить, установлен ли Docker.
# 2. Собрать образы и запустить контейнеры (PostgreSQL + приложение).
# 3. Подождать, пока база данных запустится.
# 4. Запустить приложение внутри контейнера (интерактивное меню).
# ===========================================================

echo "======================================"
echo "Запуск приложения Farmer Markets..."
echo "======================================"

# === 1. Проверка, установлен ли Docker ===
if ! command -v docker &> /dev/null
then
    echo "Docker не найден! Установите Docker: https://docs.docker.com/get-docker/"
    exit
fi

# === 1.1 Проверка, установлен ли Docker Compose v2 ===
if ! docker compose version &>/dev/null; then
    echo "Docker Compose v2 не найден. Установите плагин: sudo apt install -y docker-compose-plugin"
    exit 1
fi

# === 2. Запускаем контейнеры через docker-compose ===
echo "Сборка и запуск контейнеров..."
docker compose up --build -d

# --build — пересобирает образы, если изменились файлы (Dockerfile, requirements и т.д.)
# -d — запускает контейнеры в фоновом режиме (detached mode).

# === 3. Ждём запуск базы данных ===
echo "Ожидание запуска базы данных..."
sleep 15
# Делаем паузу, чтобы PostgreSQL успел запуститься.
# (Можно было бы сделать проверку доступности порта, но для простоты — sleep.)

# === 3.1 Проверка, что контейнер farmer_app запущен ===
if ! docker ps --format '{{.Names}}' | grep -q 'farmer_app'; then
    echo "Ошибка: контейнер farmer_app не запущен!"
    exit 1
fi

# === 4. Запускаем приложение внутри контейнера ===
echo "Запуск приложения..."
docker exec -it farmer_app python -m app.main # -m делает так, что Python считает app пакетом.
# docker exec -it — запускает команду внутри работающего контейнера.
# farmer_app — это имя контейнера (задано в docker-compose.yml).
# python app.main — запускаем наш консольный интерфейс. Конструкция сделана именно так, потому что папка app определена как модуль
